<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QueryDesigner</name>
    </assembly>
    <members>
        <member name="T:QueryDesigner.Expressions.OrderStep">
            <summary>
            Sorting step.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.OrderStep.First">
            <summary>
            For OrderBy.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.OrderStep.Next">
            <summary>
            For ThenBy.
            </summary>
        </member>
        <member name="T:QueryDesigner.Expressions.OrderExpression">
            <summary>
            Constructor expressions for OrderBy and ThenBy methods.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.OrderExpression.QueryableType">
            <summary>
            Queryable type.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.OrderExpression.QueryableOrderBy">
            <summary>
            OrderBy method.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.OrderExpression.QueryableOrderByDescending">
            <summary>
            OrderBy desc method.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.OrderExpression.QueryableThenBy">
            <summary>
            ThenBy method.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.OrderExpression.QueryableThenByDescending">
            <summary>
            ThenBy desc method.
            </summary>
        </member>
        <member name="M:QueryDesigner.Expressions.OrderExpression.GetOrderedQueryable``1(QueryDesigner.OrderFilter,System.Linq.IQueryable{``0},QueryDesigner.Expressions.OrderStep)">
            <summary>
            Perform data sorting.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="filter">.</param>
            <param name="data">Data for sort.</param>
            <param name="step">Step number.</param>
            <returns>Sorted query.</returns>
        </member>
        <member name="M:QueryDesigner.Expressions.OrderExpression.GetDeclaringProperty(System.Type,System.String)">
            <summary>
            Get property from class in which it is declared.
            </summary>
            <param name="t">Type of entity.</param>
            <param name="name">Name of property.</param>
            <returns>Property info.</returns>
        </member>
        <member name="T:QueryDesigner.Expressions.WhereExpression">
            <summary>
            Constructor expressions for Where methods.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.StringType">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.ExpType">
            <summary>
            Expression type.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.QueryableType">
            <summary>
            Queryable type.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.AndExpMethod">
            <summary>
            Binary AndAlso method for expression.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.OrExpMethod">
            <summary>
            Binary OrElse method for expression.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.StartsMethod">
            <summary>
            Info about "StartsWith" method.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.ContainsMethod">
            <summary>
            Info about "Contains" method.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.AsQueryableMethod">
            <summary>
            Info about AsQueryableMethod.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.CollectionAny">
            <summary>
            Info about "Any" method with one parameter for collection.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.CollectionAny2">
            <summary>
            Info about "Any" method with two parameter for collection.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.ExpressionMethod">
            <summary>
            Info about method of constructing expressions.
            </summary>
        </member>
        <member name="F:QueryDesigner.Expressions.WhereExpression.AvailableCastTypes">
            <summary>
            Available types for conversion.
            </summary>
        </member>
        <member name="M:QueryDesigner.Expressions.WhereExpression.GetExpression``1(QueryDesigner.WhereFilter,System.String)">
            <summary>
            Get final expression for filter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="filter">Filter for query.</param>
            <param name="suffix">Suffix vor variable.</param>
            <returns>Final expression.</returns>
        </member>
        <member name="M:QueryDesigner.Expressions.WhereExpression.GetTreeExpression``1(QueryDesigner.TreeFilter,System.String)">
            <summary>
            Get final expression for tree filter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="filter">Tree filter for query.</param>
            <param name="suffix">Suffix vor variable.</param>
            <returns>Final expression.</returns>
        </member>
        <member name="M:QueryDesigner.Expressions.WhereExpression.GetExpressionForTreeField(System.Linq.Expressions.Expression,QueryDesigner.TreeFilter,System.String)">
            <summary>
            Construct expressions chain for tree filter.
            </summary>
            <param name="e">Parameter expression.</param>
            <param name="filter">Tree filter for query.</param>
            <param name="suffix">Suffix vor variable.</param>
            <returns>Expression chain.</returns>
        </member>
        <member name="M:QueryDesigner.Expressions.WhereExpression.GetExpressionForField(System.Linq.Expressions.Expression,QueryDesigner.WhereFilter,System.String)">
            <summary>
            Construct expressions chain between WhereFilters.
            </summary>
            <param name="e">Parameter expression.</param>
            <param name="filter">Tree filter for query.</param>
            <param name="suffix">Suffix vor variable.</param>
            <returns>Expression chain.</returns>
        </member>
        <member name="M:QueryDesigner.Expressions.WhereExpression.GenerateExpressionOneField(System.Linq.Expressions.Expression,QueryDesigner.WhereFilter)">
            <summary>
            Construct bool-expression between different expression and a filter.
            </summary>
            <param name="prop">Different expression.</param>
            <param name="filter">Filter for query.</param>
            <returns>Expression with filter.</returns>
        </member>
        <member name="M:QueryDesigner.Expressions.WhereExpression.TryCastFieldValueType(System.Object,System.Type)">
            <summary>
            Value type filter field conversion.
            </summary>
            <param name="value">Filter value.</param>
            <param name="type">Conversion to type.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:QueryDesigner.Expressions.WhereExpression.AsQueryable(System.Linq.Expressions.Expression)">
            <summary>
            Cast IEnumerable to IQueryable.
            </summary>
            <param name="prop">IEnumerable expression</param>
            <returns>IQueryable expression.</returns>
        </member>
        <member name="M:QueryDesigner.Expressions.WhereExpression.IsEnumerable(System.Linq.Expressions.Expression)">
            <summary>
            Expression type is IEnumerable.
            </summary>
            <param name="prop">Verifiable expression.</param>
            <returns>Result of checking.</returns>
        </member>
        <member name="M:QueryDesigner.Expressions.WhereExpression.GetDeclaringProperty(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Get property from class in which it is declared.
            </summary>
            <param name="e">Parameter expression.</param>
            <param name="name">Name of property.</param>
            <returns>Property info.</returns>
        </member>
        <member name="T:QueryDesigner.FilterContainer">
            <summary>
            Container for filters.
            </summary>
        </member>
        <member name="M:QueryDesigner.FilterContainer.#ctor">
            <summary>
            Container for filters.
            </summary>
        </member>
        <member name="P:QueryDesigner.FilterContainer.Where">
            <summary>
            Where filters.
            </summary>
        </member>
        <member name="P:QueryDesigner.FilterContainer.OrderBy">
            <summary>
            Order filters.
            </summary>
        </member>
        <member name="P:QueryDesigner.FilterContainer.Skip">
            <summary>
            Skip number of elements.
            </summary>
        </member>
        <member name="P:QueryDesigner.FilterContainer.Take">
            <summary>
            Take number of elements.
            </summary>
        </member>
        <member name="T:QueryDesigner.QueryableExtensions">
            <summary>
            Override Quaryable functions.
            </summary>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.Request``1(System.Linq.IQueryable{``0},QueryDesigner.FilterContainer)">
            <summary>
            FilterContainer expression.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">Integrable request.</param>
            <param name="request">Container for filters.</param>
            <returns>Performed query.</returns>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.Request``1(System.Collections.Generic.IEnumerable{``0},QueryDesigner.FilterContainer)">
            <summary>
            FilterContainer expression.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">An enumerated request.</param>
            <param name="request">Container for filters.</param>
            <returns>Performed query.</returns>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},QueryDesigner.WhereFilter)">
            <summary>
            Filtration items based on a given WhereFilter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">Integrable request.</param>
            <param name="filter">Filter for queryable expression.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
            <returns>Filtered query.</returns>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},QueryDesigner.WhereFilter)">
            <summary>
            Filtration items based on a given WhereFilter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">An enumerated request.</param>
            <param name="filter">Filter for queryable expression.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
            <returns>Filtered query.</returns>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},QueryDesigner.TreeFilter)">
            <summary>
            Filtration items based on a given TreeFilter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">Integrable request.</param>
            <param name="filter">Tree filter for queryable expression.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
            <returns>Filtered query.</returns>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},QueryDesigner.TreeFilter)">
            <summary>
            Filtration items based on a given TreeFilter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">An enumerated request.</param>
            <param name="filter">Tree filter for queryable expression.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
            <returns>Filtered query.</returns>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},QueryDesigner.OrderFilter)">
            <summary>
            Sorting items based on a given OrderFilter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">Integrable request.</param>
            <param name="filter">Sort filter.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
            <returns>Sorted query.</returns>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},QueryDesigner.OrderFilter)">
            <summary>
            Sorting items based on a given OrderFilter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">An enumerated request.</param>
            <param name="filter">Sort filter.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
            <returns>Sorted query.</returns>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.ThenBy``1(System.Linq.IQueryable{``0},QueryDesigner.OrderFilter)">
            <summary>
            Sorting items based on a given OrderFilter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">Integrable request.</param>
            <param name="filter">Sort filter.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
            <returns>Sorted query.</returns>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.ThenBy``1(System.Collections.Generic.IEnumerable{``0},QueryDesigner.OrderFilter)">
            <summary>
            Sorting items based on a given OrderFilter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">An enumerated request.</param>
            <param name="filter">Sort filter.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
            <returns>Sorted query.</returns>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{QueryDesigner.OrderFilter})">
            <summary>
            Sorting items based on a given OrderFilter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">Integrable request.</param>
            <param name="filters">Enumeration of sort filters.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
            <returns>Sorted query.</returns>
        </member>
        <member name="M:QueryDesigner.QueryableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QueryDesigner.OrderFilter})">
            <summary>
            Sorting items based on a given OrderFilter.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="query">An enumerated request.</param>
            <param name="filters">Enumeration of sort filters.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
            <returns>Sorted query.</returns>
        </member>
        <member name="T:QueryDesigner.OrderFilter">
            <summary>
            Sort by the field.
            </summary>
        </member>
        <member name="M:QueryDesigner.OrderFilter.#ctor">
            <summary>
            Sort by the field.
            </summary>
        </member>
        <member name="P:QueryDesigner.OrderFilter.Field">
            <summary>
            Sort field name.
            </summary>
        </member>
        <member name="P:QueryDesigner.OrderFilter.Order">
            <summary>
            Sorting order.
            </summary>
        </member>
        <member name="T:QueryDesigner.OrderFilterType">
            <summary>
            Sorting order.
            </summary>
        </member>
        <member name="F:QueryDesigner.OrderFilterType.Asc">
            <summary>
            Ascending.
            </summary>
        </member>
        <member name="F:QueryDesigner.OrderFilterType.Desc">
            <summary>
            Descending.
            </summary>
        </member>
        <member name="T:QueryDesigner.TreeFilterType">
            <summary>
            Type of operation.
            </summary>
        </member>
        <member name="F:QueryDesigner.TreeFilterType.None">
            <summary>
            This is not operation.
            </summary>
        </member>
        <member name="F:QueryDesigner.TreeFilterType.And">
            <summary>
            And operation.
            </summary>
        </member>
        <member name="F:QueryDesigner.TreeFilterType.Or">
            <summary>
            Or operation.
            </summary>
        </member>
        <member name="T:QueryDesigner.WhereFilter">
            <summary>
            Tree filter for queryable expression.
            </summary>
        </member>
        <member name="M:QueryDesigner.WhereFilter.#ctor">
            <summary>
            Tree filter for queryable expression.
            </summary>
        </member>
        <member name="P:QueryDesigner.WhereFilter.Field">
            <summary>
            Filter field name.
            </summary>
        </member>
        <member name="P:QueryDesigner.WhereFilter.FilterType">
            <summary>
            Type of field filtration.
            </summary>
        </member>
        <member name="P:QueryDesigner.WhereFilter.Value">
            <summary>
            Value for filtering.
            </summary>
        </member>
        <member name="T:QueryDesigner.WhereFilterType">
            <summary>
            Type of elements comparison.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.None">
            <summary>
            The field is not a filtered.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.Equal">
            <summary>
            The field is equal to the value.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.NotEqual">
            <summary>
            The field is not equal to the value.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.LessThan">
            <summary>
            The field is less than the value.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.GreaterThan">
            <summary>
            The field is greater than the value.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.LessThanOrEqual">
            <summary>
            Field is less than or equal to value.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.GreaterThanOrEqual">
            <summary>
            The field is greater than or equal to the value.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.Contains">
            <summary>
            The field is contains the value.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.NotContains">
            <summary>
            The field is not contains the value.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.StartsWith">
            <summary>
            The field is start with value.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.NotStartsWith">
            <summary>
            The field is not start with value.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.Any">
            <summary>
            Collection contains data.
            </summary>
        </member>
        <member name="F:QueryDesigner.WhereFilterType.NotAny">
            <summary>
            Collection not contains data.
            </summary>
        </member>
        <member name="T:QueryDesigner.TreeFilter">
            <summary>
            Filters with infinite nesting and boolean operations therebetween.
            </summary>
        </member>
        <member name="M:QueryDesigner.TreeFilter.#ctor">
            <summary>
            Filters with infinite nesting and boolean operations therebetween.
            </summary>
        </member>
        <member name="P:QueryDesigner.TreeFilter.OperatorType">
            <summary>
            Type of logical operator.
            </summary>
        </member>
        <member name="P:QueryDesigner.TreeFilter.Operands">
            <summary>
            Operands of boolean expressions.
            </summary>
        </member>
    </members>
</doc>
